<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Postgres on Moorberry.net</title>
    <link>https://moorberry.net/tags/postgres/</link>
    <description>Recent content in Postgres on Moorberry.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 15 Jan 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://moorberry.net/tags/postgres/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Multi Column Unique Indexes</title>
      <link>https://moorberry.net/blog/multi-column-unique-indexes/</link>
      <pubDate>Wed, 15 Jan 2014 00:00:00 +0000</pubDate>
      <guid>https://moorberry.net/blog/multi-column-unique-indexes/</guid>
      <description>When a database key is created from a combination of two or more columns, the key is called a composite key. Each column may not be unique by itself within the database table but when combined with the other column(s) in the composite key, the combination is unique.&#xA;The following data is taken from the Google DFP Report API example source code.&#xA;CREATE TABLE `src_dfp` ( `id` int(11) unsigned NOT NULL AUTO_INCREMENT, `ad_unit_1` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL, `ad_unit_2` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL, `ad_unit_id_1` int(11) DEFAULT NULL, `ad_unit_id_2` int(11) DEFAULT NULL, `advertiser_id` int(11) DEFAULT NULL, `advertiser_name` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL, `creative_id` bigint(11) DEFAULT NULL, `creative_name` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL, `date` date DEFAULT NULL, `line_item_cost_per_unit` int(11) DEFAULT NULL, `line_item_cost_type` varchar(11) COLLATE utf8_unicode_ci DEFAULT NULL, `line_item_end_date_time` datetime DEFAULT NULL, `line_item_id` int(11) DEFAULT NULL, `line_item_name` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL, `line_item_start_date_time` datetime DEFAULT NULL, `line_item_type` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL, `merged_ad_server_clicks` int(11) DEFAULT NULL, `merged_ad_server_impressions` int(11) DEFAULT NULL, `order_end_date_time` datetime DEFAULT NULL, `order_id` int(11) DEFAULT NULL, `order_name` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL, `order_start_date_time` datetime DEFAULT NULL, `created_at` datetime DEFAULT NOW(), `updated_at` datetime DEFAULT NULL, PRIMARY KEY (`id`), UNIQUE KEY `composite_dfp` (`date`,`ad_unit_id_1`,`ad_unit_id_2`,`advertiser_id`,`creative_id`,`line_item_id`,`order_id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci; Or to modify an existing table:</description>
    </item>
    <item>
      <title>Postgres: Search and Sort by Radial Distance</title>
      <link>https://moorberry.net/blog/postgres-search-distance/</link>
      <pubDate>Wed, 11 Dec 2013 00:00:00 +0000</pubDate>
      <guid>https://moorberry.net/blog/postgres-search-distance/</guid>
      <description>Request users by radial distance and sort by nearest to farthest, vice versa, or whatever other attributes you&amp;rsquo;d like to include.&#xA;Searching for a user by distance, in your database, is easy with Postgres. Just create a users table with, at minimum, columns named latitude and longitude.&#xA;Data postgres=# SELECT * FROM users; +----+------+----------+-----------+ | id | name | latitude | longitude | +----+------+----------+-----------+ SQL SELECT name, distance FROM ( SELECT name, ((ACOS(SIN(#{latitude} * PI() / 180) * SIN(u.</description>
    </item>
    <item>
      <title>Export Data as CSV</title>
      <link>https://moorberry.net/blog/export-csv/</link>
      <pubDate>Mon, 14 Nov 2011 00:00:00 +0000</pubDate>
      <guid>https://moorberry.net/blog/export-csv/</guid>
      <description>&lt;p&gt;In my research I found a hundred and more different ways to manage the task of exporting data into a CSV file. Whenever Iâ€™m learning something new, on a new system or with a new language, I like to build the process myself from scratch. And being a minimalist programmer it just seems fitting. Enjoy&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
